
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

namespace Reservations.Tests
{
    /// <summary>
    /// !!! WARNING 
    /// !!! Project structure test.
    /// !!! DON'T CHANGE IT! 
    /// !!! Changes may cause the solution to be rejected.
    /// </summary>
    public class Tests
    {
        [SetUp]
        public void Setup()
        {
        }

        /// <summary>
        /// !!! WARNING 
        /// !!! Project structure test.
        /// !!! DON'T CHANGE IT! 
        /// !!! Changes may cause the solution to be rejected.
        /// </summary>
        [Test]
        public void StructureTest()
        {
            
            Assembly assembly;
            Type type;
            Type methodReturnType;
            MethodInfo method;
            int methodsCount;
            ParameterInfo parameter;
            int parametersCount;
            int constructorsCount;
            List<string> constructorParameterNameTypeDictionary;
            ConstructorInfo constructor;
            int fieldsCount;
            FieldInfo field;
            Type fieldReturnType;
            PropertyInfo property;
            int propertiesCount;
            Type propertyReturnType;
            assembly = Assembly.Load(Decode("UmVzZXJ2YXRpb25zLCBWZXJzaW9uPTEuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49bnVsbA==") /*"Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"*/ );
            Assert.IsNotNull(assembly, "Missing  Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkF1dG9NYXBwZXJDb25maWc=") /*"Reservations.AutoMapperConfig"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.AutoMapperConfig");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.AutoMapperConfig is not class");
                    Assert.IsTrue(type.IsAbstract, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.AutoMapperConfig is not abstract class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.AutoMapperConfig is not public class");
                    Assert.IsTrue(type.IsSealed, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.AutoMapperConfig is not sealed type");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("SW5pdA==") /*"Init"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.AutoMapperConfig.Init() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.AutoMapperConfig.Init() is not public");
                            Assert.IsTrue(method.IsStatic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.AutoMapperConfig.Init() is not static");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.AutoMapperConfig.Init() return type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRhdGFiYXNlRmFjdG9yeQ==") /*"Reservations.DatabaseFactory"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.DatabaseFactory");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.DatabaseFactory is not class");
                    Assert.IsTrue(type.IsAbstract, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.DatabaseFactory is not abstract class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.DatabaseFactory is not public class");
                    Assert.IsTrue(type.IsSealed, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.DatabaseFactory is not sealed type");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("Q3JlYXRlRGF0YWJhc2U=") /*"CreateDatabase"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.DatabaseFactory.CreateDatabase() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.DatabaseFactory.CreateDatabase() is not public");
                            Assert.IsTrue(method.IsStatic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.DatabaseFactory.CreateDatabase() is not static");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("Reservations.Db.IDatabase",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.DatabaseFactory.CreateDatabase() return type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLk5pbmplY3REZXBlbmRlbmN5U2NvcGU=") /*"Reservations.NinjectDependencyScope"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RGlzcG9zZQ==") /*"Dispose"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope.Dispose() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope.Dispose() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope.Dispose() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope.Dispose() return type has changed");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("R2V0U2VydmljZQ==") /*"GetService"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope.GetService(Type serviceType) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope.GetService(Type serviceType) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope.GetService(Type serviceType) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Object",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope.GetService(Type serviceType) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope.GetService(Type serviceType) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("c2VydmljZVR5cGU=") /*"serviceType"*/  && x.ParameterType.FullName == "System.Type");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyScope.GetService(Type serviceType) parameter serviceType does not exists or does not have type System.Type");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLk5pbmplY3REZXBlbmRlbmN5UmVzb2x2ZXI=") /*"Reservations.NinjectDependencyResolver"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("QmVnaW5TY29wZQ==") /*"BeginScope"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.BeginScope() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.BeginScope() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.BeginScope() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Web.Http.Dependencies.IDependencyScope",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.BeginScope() return type has changed");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RGlzcG9zZQ==") /*"Dispose"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.Dispose() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.Dispose() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.Dispose() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.Dispose() return type has changed");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("R2V0U2VydmljZQ==") /*"GetService"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.GetService(Type serviceType) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.GetService(Type serviceType) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.GetService(Type serviceType) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Object",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.GetService(Type serviceType) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.GetService(Type serviceType) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("c2VydmljZVR5cGU=") /*"serviceType"*/  && x.ParameterType.FullName == "System.Type");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver.GetService(Type serviceType) parameter serviceType does not exists or does not have type System.Type");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Ninject.IKernel");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver(IKernel kernel) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver(IKernel kernel)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("a2VybmVs") /*"kernel"*/  && x.ParameterType.FullName == "Ninject.IKernel");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectDependencyResolver(IKernel kernel) parameter kernel does not exists or does not have type Ninject.IKernel");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLk5pbmplY3RXZWJDb21tb24=") /*"Reservations.NinjectWebCommon"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon is not class");
                    Assert.IsTrue(type.IsAbstract, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon is not abstract class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon is not public class");
                    Assert.IsTrue(type.IsSealed, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon is not sealed type");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("U3RhcnQ=") /*"Start"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon.Start() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon.Start() is not public");
                            Assert.IsTrue(method.IsStatic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon.Start() is not static");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon.Start() return type has changed");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("U3RvcA==") /*"Stop"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon.Stop() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon.Stop() is not public");
                            Assert.IsTrue(method.IsStatic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon.Stop() is not static");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.NinjectWebCommon.Stop() return type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLldlYkFwaUNvbmZpZw==") /*"Reservations.WebApiConfig"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.WebApiConfig");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.WebApiConfig is not class");
                    Assert.IsTrue(type.IsAbstract, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.WebApiConfig is not abstract class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.WebApiConfig is not public class");
                    Assert.IsTrue(type.IsSealed, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.WebApiConfig is not sealed type");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("UmVnaXN0ZXI=") /*"Register"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.WebApiConfig.Register(HttpConfiguration config) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.WebApiConfig.Register(HttpConfiguration config) is not public");
                            Assert.IsTrue(method.IsStatic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.WebApiConfig.Register(HttpConfiguration config) is not static");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.WebApiConfig.Register(HttpConfiguration config) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.WebApiConfig.Register(HttpConfiguration config) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("Y29uZmln") /*"config"*/  && x.ParameterType.FullName == "System.Web.Http.HttpConfiguration");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.WebApiConfig.Register(HttpConfiguration config) parameter config does not exists or does not have type System.Web.Http.HttpConfiguration");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLk12Y0FwcGxpY2F0aW9u") /*"Reservations.MvcApplication"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RGlzcG9zZQ==") /*"Dispose"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.Dispose() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.Dispose() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.Dispose() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.Dispose() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("U2l0ZQ==") /*"Site"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.ISite Site does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1NpdGU=") /*"get_Site"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.get_Site() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.get_Site() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.get_Site() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.ComponentModel.ISite",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.get_Site() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1NpdGU=") /*"get_Site"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.get_Site() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.get_Site() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.get_Site() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.ComponentModel.ISite",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.get_Site() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.ComponentModel.ISite",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.MvcApplication.ISite Site  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLlNlcnZpY2VzLklMZWN0dXJlSGFsbHNTZXJ2aWNl") /*"Reservations.Services.ILectureHallsService"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILectureHallsService");
                    Assert.IsTrue(type.IsAbstract, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILectureHallsService is not abstract class");
                    Assert.IsTrue(type.IsInterface, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILectureHallsService is not interface");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILectureHallsService is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("QWxs") /*"All"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILectureHallsService.All() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILectureHallsService.All() is not public");
                            Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILectureHallsService.All() is not abstract");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILectureHallsService.All() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.LectureHallItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILectureHallsService.All() return type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLlNlcnZpY2VzLklMZWN0dXJlcnNTZXJ2aWNl") /*"Reservations.Services.ILecturersService"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILecturersService");
                    Assert.IsTrue(type.IsAbstract, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILecturersService is not abstract class");
                    Assert.IsTrue(type.IsInterface, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILecturersService is not interface");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILecturersService is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("QWxs") /*"All"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILecturersService.All() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILecturersService.All() is not public");
                            Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILecturersService.All() is not abstract");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILecturersService.All() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.LecturerItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ILecturersService.All() return type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLlNlcnZpY2VzLklSZXNlcnZhdGlvbnNTZXJ2aWNl") /*"Reservations.Services.IReservationsService"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService");
                    Assert.IsTrue(type.IsAbstract, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService is not abstract class");
                    Assert.IsTrue(type.IsInterface, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService is not interface");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("QWxs") /*"All"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.All() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.All() is not public");
                            Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.All() is not abstract");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.All() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.ReservationItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.All() return type has changed");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("R2V0QnlJZA==") /*"GetById"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetById(Int32 id) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetById(Int32 id) is not public");
                            Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetById(Int32 id) is not abstract");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetById(Int32 id) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("Reservations.Models.ReservationItem",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetById(Int32 id) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetById(Int32 id) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("aWQ=") /*"id"*/  && x.ParameterType.FullName == "System.Int32");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetById(Int32 id) parameter id does not exists or does not have type System.Int32");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("R2V0QnlEYXk=") /*"GetByDay"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetByDay(DateTime dayInt32 hallNumber) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetByDay(DateTime dayInt32 hallNumber) is not public");
                            Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetByDay(DateTime dayInt32 hallNumber) is not abstract");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetByDay(DateTime dayInt32 hallNumber) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.ReservationItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetByDay(DateTime dayInt32 hallNumber) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetByDay(DateTime dayInt32 hallNumber) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("ZGF5") /*"day"*/  && x.ParameterType.FullName == "System.DateTime");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetByDay(DateTime dayInt32 hallNumber) parameter day does not exists or does not have type System.DateTime");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetByDay(DateTime dayInt32 hallNumber) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("aGFsbE51bWJlcg==") /*"hallNumber"*/  && x.ParameterType.FullName == "System.Int32");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetByDay(DateTime dayInt32 hallNumber) parameter hallNumber does not exists or does not have type System.Int32");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("R2V0SGFsbHNGcmVlSG91cnNCeURheQ==") /*"GetHallsFreeHoursByDay"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetHallsFreeHoursByDay(DateTime day) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetHallsFreeHoursByDay(DateTime day) is not public");
                            Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetHallsFreeHoursByDay(DateTime day) is not abstract");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetHallsFreeHoursByDay(DateTime day) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.HallFreeHoursStatisticsItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetHallsFreeHoursByDay(DateTime day) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetHallsFreeHoursByDay(DateTime day) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("ZGF5") /*"day"*/  && x.ParameterType.FullName == "System.DateTime");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.GetHallsFreeHoursByDay(DateTime day) parameter day does not exists or does not have type System.DateTime");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("VmFsaWRhdGVOZXdSZXNlcnZhdGlvbg==") /*"ValidateNewReservation"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.ValidateNewReservation(NewReservationItem reservation) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.ValidateNewReservation(NewReservationItem reservation) is not public");
                            Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.ValidateNewReservation(NewReservationItem reservation) is not abstract");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.ValidateNewReservation(NewReservationItem reservation) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.ValidateNewReservation(NewReservationItem reservation) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.ValidateNewReservation(NewReservationItem reservation) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("cmVzZXJ2YXRpb24=") /*"reservation"*/  && x.ParameterType.FullName == "Reservations.Models.NewReservationItem");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.ValidateNewReservation(NewReservationItem reservation) parameter reservation does not exists or does not have type Reservations.Models.NewReservationItem");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("QWRk") /*"Add"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Add(NewReservationItem reservation) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Add(NewReservationItem reservation) is not public");
                            Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Add(NewReservationItem reservation) is not abstract");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Add(NewReservationItem reservation) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Add(NewReservationItem reservation) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Add(NewReservationItem reservation) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("cmVzZXJ2YXRpb24=") /*"reservation"*/  && x.ParameterType.FullName == "Reservations.Models.NewReservationItem");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Add(NewReservationItem reservation) parameter reservation does not exists or does not have type Reservations.Models.NewReservationItem");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RGVsZXRl") /*"Delete"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Delete(Int32 id) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Delete(Int32 id) is not public");
                            Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Delete(Int32 id) is not abstract");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Delete(Int32 id) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Delete(Int32 id) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Delete(Int32 id) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("aWQ=") /*"id"*/  && x.ParameterType.FullName == "System.Int32");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.IReservationsService.Delete(Int32 id) parameter id does not exists or does not have type System.Int32");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLlNlcnZpY2VzLklTdWJqZWN0c1NlcnZpY2U=") /*"Reservations.Services.ISubjectsService"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ISubjectsService");
                    Assert.IsTrue(type.IsAbstract, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ISubjectsService is not abstract class");
                    Assert.IsTrue(type.IsInterface, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ISubjectsService is not interface");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ISubjectsService is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("QWxs") /*"All"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ISubjectsService.All() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ISubjectsService.All() is not public");
                            Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ISubjectsService.All() is not abstract");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ISubjectsService.All() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.SubjectItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ISubjectsService.All() return type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLlNlcnZpY2VzLkxlY3R1cmVIYWxsc1NlcnZpY2U=") /*"Reservations.Services.LectureHallsService"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LectureHallsService");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LectureHallsService is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LectureHallsService is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("QWxs") /*"All"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LectureHallsService.All() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LectureHallsService.All() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LectureHallsService.All() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.LectureHallItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LectureHallsService.All() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.GetAllLectureHallsQuery");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LectureHallsService(GetAllLectureHallsQuery query) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LectureHallsService(GetAllLectureHallsQuery query)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("cXVlcnk=") /*"query"*/  && x.ParameterType.FullName == "Reservations.Db.GetAllLectureHallsQuery");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LectureHallsService(GetAllLectureHallsQuery query) parameter query does not exists or does not have type Reservations.Db.GetAllLectureHallsQuery");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLlNlcnZpY2VzLkxlY3R1cmVyc1NlcnZpY2U=") /*"Reservations.Services.LecturersService"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LecturersService");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LecturersService is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LecturersService is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("QWxs") /*"All"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LecturersService.All() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LecturersService.All() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LecturersService.All() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.LecturerItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LecturersService.All() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.GetAllLecturersQuery");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LecturersService(GetAllLecturersQuery query) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LecturersService(GetAllLecturersQuery query)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("cXVlcnk=") /*"query"*/  && x.ParameterType.FullName == "Reservations.Db.GetAllLecturersQuery");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.LecturersService(GetAllLecturersQuery query) parameter query does not exists or does not have type Reservations.Db.GetAllLecturersQuery");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLlNlcnZpY2VzLlJlc2VydmF0aW9uc1NlcnZpY2U=") /*"Reservations.Services.ReservationsService"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("QWxs") /*"All"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.All() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.All() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.All() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.ReservationItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.All() return type has changed");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("R2V0QnlJZA==") /*"GetById"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetById(Int32 id) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetById(Int32 id) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetById(Int32 id) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("Reservations.Models.ReservationItem",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetById(Int32 id) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetById(Int32 id) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("aWQ=") /*"id"*/  && x.ParameterType.FullName == "System.Int32");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetById(Int32 id) parameter id does not exists or does not have type System.Int32");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("VmFsaWRhdGVOZXdSZXNlcnZhdGlvbg==") /*"ValidateNewReservation"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.ValidateNewReservation(NewReservationItem newReservation) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.ValidateNewReservation(NewReservationItem newReservation) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.ValidateNewReservation(NewReservationItem newReservation) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.ValidateNewReservation(NewReservationItem newReservation) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.ValidateNewReservation(NewReservationItem newReservation) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("bmV3UmVzZXJ2YXRpb24=") /*"newReservation"*/  && x.ParameterType.FullName == "Reservations.Models.NewReservationItem");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.ValidateNewReservation(NewReservationItem newReservation) parameter newReservation does not exists or does not have type Reservations.Models.NewReservationItem");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("QWRk") /*"Add"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Add(NewReservationItem newReservation) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Add(NewReservationItem newReservation) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Add(NewReservationItem newReservation) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Add(NewReservationItem newReservation) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Add(NewReservationItem newReservation) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("bmV3UmVzZXJ2YXRpb24=") /*"newReservation"*/  && x.ParameterType.FullName == "Reservations.Models.NewReservationItem");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Add(NewReservationItem newReservation) parameter newReservation does not exists or does not have type Reservations.Models.NewReservationItem");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RGVsZXRl") /*"Delete"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Delete(Int32 id) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Delete(Int32 id) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Delete(Int32 id) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Delete(Int32 id) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Delete(Int32 id) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("aWQ=") /*"id"*/  && x.ParameterType.FullName == "System.Int32");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.Delete(Int32 id) parameter id does not exists or does not have type System.Int32");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("R2V0QnlEYXk=") /*"GetByDay"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetByDay(DateTime dayInt32 hallNumber) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetByDay(DateTime dayInt32 hallNumber) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetByDay(DateTime dayInt32 hallNumber) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.ReservationItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetByDay(DateTime dayInt32 hallNumber) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetByDay(DateTime dayInt32 hallNumber) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("ZGF5") /*"day"*/  && x.ParameterType.FullName == "System.DateTime");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetByDay(DateTime dayInt32 hallNumber) parameter day does not exists or does not have type System.DateTime");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetByDay(DateTime dayInt32 hallNumber) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("aGFsbE51bWJlcg==") /*"hallNumber"*/  && x.ParameterType.FullName == "System.Int32");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetByDay(DateTime dayInt32 hallNumber) parameter hallNumber does not exists or does not have type System.Int32");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("R2V0SGFsbHNGcmVlSG91cnNCeURheQ==") /*"GetHallsFreeHoursByDay"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetHallsFreeHoursByDay(DateTime day) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetHallsFreeHoursByDay(DateTime day) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetHallsFreeHoursByDay(DateTime day) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.HallFreeHoursStatisticsItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetHallsFreeHoursByDay(DateTime day) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetHallsFreeHoursByDay(DateTime day) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("ZGF5") /*"day"*/  && x.ParameterType.FullName == "System.DateTime");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService.GetHallsFreeHoursByDay(DateTime day) parameter day does not exists or does not have type System.DateTime");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.GetAllReservationsQuery");
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.GetReservationByIdQuery");
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.AddReservationQuery");
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.DeleteReservationQuery");
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.GetAllLecturersQuery");
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.GetAllLectureHallsQuery");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(6,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("cXVlcnlBbGw=") /*"queryAll"*/  && x.ParameterType.FullName == "Reservations.Db.GetAllReservationsQuery");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls) parameter queryAll does not exists or does not have type Reservations.Db.GetAllReservationsQuery");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(6,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("cXVlcnlCeUlk") /*"queryById"*/  && x.ParameterType.FullName == "Reservations.Db.GetReservationByIdQuery");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls) parameter queryById does not exists or does not have type Reservations.Db.GetReservationByIdQuery");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(6,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("cXVlcnlBZGQ=") /*"queryAdd"*/  && x.ParameterType.FullName == "Reservations.Db.AddReservationQuery");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls) parameter queryAdd does not exists or does not have type Reservations.Db.AddReservationQuery");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(6,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("cXVlcnlEZWxldGU=") /*"queryDelete"*/  && x.ParameterType.FullName == "Reservations.Db.DeleteReservationQuery");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls) parameter queryDelete does not exists or does not have type Reservations.Db.DeleteReservationQuery");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(6,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("cXVlcnlBbGxMZWN0dXJlcnM=") /*"queryAllLecturers"*/  && x.ParameterType.FullName == "Reservations.Db.GetAllLecturersQuery");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls) parameter queryAllLecturers does not exists or does not have type Reservations.Db.GetAllLecturersQuery");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(6,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("cXVlcnlBbGxMZWN0dXJlSGFsbHM=") /*"queryAllLectureHalls"*/  && x.ParameterType.FullName == "Reservations.Db.GetAllLectureHallsQuery");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.ReservationsService(GetAllReservationsQuery queryAllGetReservationByIdQuery queryByIdAddReservationQuery queryAddDeleteReservationQuery queryDeleteGetAllLecturersQuery queryAllLecturersGetAllLectureHallsQuery queryAllLectureHalls) parameter queryAllLectureHalls does not exists or does not have type Reservations.Db.GetAllLectureHallsQuery");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLlNlcnZpY2VzLlN1YmplY3RzU2VydmljZQ==") /*"Reservations.Services.SubjectsService"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.SubjectsService");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.SubjectsService is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.SubjectsService is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("QWxs") /*"All"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.SubjectsService.All() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.SubjectsService.All() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.SubjectsService.All() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Collections.Generic.IEnumerable`1[[Reservations.Models.SubjectItem, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.SubjectsService.All() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.GetAllSubjectsQuery");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.SubjectsService(GetAllSubjectsQuery query) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.SubjectsService(GetAllSubjectsQuery query)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("cXVlcnk=") /*"query"*/  && x.ParameterType.FullName == "Reservations.Db.GetAllSubjectsQuery");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Services.SubjectsService(GetAllSubjectsQuery query) parameter query does not exists or does not have type Reservations.Db.GetAllSubjectsQuery");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLk1vZGVscy5IYWxsRnJlZUhvdXJzU3RhdGlzdGljc0l0ZW0=") /*"Reservations.Models.HallFreeHoursStatisticsItem"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("SGFsbE51bWJlcg==") /*"HallNumber"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.Int32 HallNumber does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0hhbGxOdW1iZXI=") /*"get_HallNumber"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_HallNumber() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_HallNumber() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_HallNumber() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0hhbGxOdW1iZXI=") /*"get_HallNumber"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_HallNumber() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_HallNumber() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_HallNumber() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.Int32 HallNumber  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("RnJlZUhvdXJzTnVtYmVy") /*"FreeHoursNumber"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.Int32 FreeHoursNumber does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0ZyZWVIb3Vyc051bWJlcg==") /*"get_FreeHoursNumber"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_FreeHoursNumber() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_FreeHoursNumber() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_FreeHoursNumber() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0ZyZWVIb3Vyc051bWJlcg==") /*"get_FreeHoursNumber"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_FreeHoursNumber() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_FreeHoursNumber() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.get_FreeHoursNumber() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.HallFreeHoursStatisticsItem.Int32 FreeHoursNumber  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLk1vZGVscy5MZWN0dXJlSGFsbEl0ZW0=") /*"Reservations.Models.LectureHallItem"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TnVtYmVy") /*"Number"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.Int32 Number does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X051bWJlcg==") /*"get_Number"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Number() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Number() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Number() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X051bWJlcg==") /*"get_Number"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Number() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Number() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Number() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.Int32 Number  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q2FwYWNpdHk=") /*"Capacity"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.Int32 Capacity does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NhcGFjaXR5") /*"get_Capacity"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Capacity() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Capacity() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Capacity() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NhcGFjaXR5") /*"get_Capacity"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Capacity() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Capacity() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.get_Capacity() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LectureHallItem.Int32 Capacity  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLk1vZGVscy5MZWN0dXJlckl0ZW0=") /*"Reservations.Models.LecturerItem"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("SWQ=") /*"Id"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.Int32 Id does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Id() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Id() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.Int32 Id  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VGl0bGU=") /*"Title"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.String Title does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1RpdGxl") /*"get_Title"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Title() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Title() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Title() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1RpdGxl") /*"get_Title"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Title() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Title() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Title() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.String Title  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TmFtZQ==") /*"Name"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.String Name does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X05hbWU=") /*"get_Name"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Name() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Name() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Name() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X05hbWU=") /*"get_Name"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Name() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Name() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Name() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.String Name  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("U3VybmFtZQ==") /*"Surname"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.String Surname does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1N1cm5hbWU=") /*"get_Surname"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Surname() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Surname() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Surname() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1N1cm5hbWU=") /*"get_Surname"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Surname() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Surname() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Surname() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.String Surname  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("U3ViamVjdA==") /*"Subject"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.String Subject does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1N1YmplY3Q=") /*"get_Subject"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Subject() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Subject() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Subject() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1N1YmplY3Q=") /*"get_Subject"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Subject() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Subject() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.get_Subject() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.LecturerItem.String Subject  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLk1vZGVscy5OZXdSZXNlcnZhdGlvbkl0ZW0=") /*"Reservations.Models.NewReservationItem"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("RnJvbQ==") /*"From"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.DateTime From does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0Zyb20=") /*"get_From"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_From() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_From() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_From() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0Zyb20=") /*"get_From"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_From() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_From() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_From() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.DateTime From  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VG8=") /*"To"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.DateTime To does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Rv") /*"get_To"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_To() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_To() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_To() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Rv") /*"get_To"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_To() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_To() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_To() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.DateTime To  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZUhhbGxOdW1iZXI=") /*"LectureHallNumber"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.Int32 LectureHallNumber does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVIYWxsTnVtYmVy") /*"get_LectureHallNumber"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LectureHallNumber() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LectureHallNumber() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LectureHallNumber() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVIYWxsTnVtYmVy") /*"get_LectureHallNumber"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LectureHallNumber() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LectureHallNumber() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LectureHallNumber() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.Int32 LectureHallNumber  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZXJJZA==") /*"LecturerId"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.Int32 LecturerId does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVySWQ=") /*"get_LecturerId"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LecturerId() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LecturerId() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LecturerId() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVySWQ=") /*"get_LecturerId"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LecturerId() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LecturerId() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.get_LecturerId() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.NewReservationItem.Int32 LecturerId  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLk1vZGVscy5SZXNlcnZhdGlvbkl0ZW0=") /*"Reservations.Models.ReservationItem"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("SWQ=") /*"Id"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.Int32 Id does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Id() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Id() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.Int32 Id  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("RnJvbQ==") /*"From"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.DateTime From does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0Zyb20=") /*"get_From"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_From() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_From() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_From() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0Zyb20=") /*"get_From"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_From() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_From() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_From() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.DateTime From  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VG8=") /*"To"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.DateTime To does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Rv") /*"get_To"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_To() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_To() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_To() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Rv") /*"get_To"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_To() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_To() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_To() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.DateTime To  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZUhhbGxOdW1iZXI=") /*"LectureHallNumber"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.Int32 LectureHallNumber does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVIYWxsTnVtYmVy") /*"get_LectureHallNumber"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_LectureHallNumber() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_LectureHallNumber() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_LectureHallNumber() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVIYWxsTnVtYmVy") /*"get_LectureHallNumber"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_LectureHallNumber() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_LectureHallNumber() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_LectureHallNumber() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.Int32 LectureHallNumber  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZXI=") /*"Lecturer"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.String Lecturer does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVy") /*"get_Lecturer"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Lecturer() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Lecturer() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Lecturer() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVy") /*"get_Lecturer"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Lecturer() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Lecturer() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Lecturer() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.String Lecturer  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("U3ViamVjdA==") /*"Subject"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.String Subject does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1N1YmplY3Q=") /*"get_Subject"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Subject() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Subject() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Subject() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1N1YmplY3Q=") /*"get_Subject"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Subject() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Subject() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.get_Subject() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ReservationItem.String Subject  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLk1vZGVscy5TdWJqZWN0SXRlbQ==") /*"Reservations.Models.SubjectItem"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("SWQ=") /*"Id"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.Int32 Id does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Id() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Id() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.Int32 Id  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TmFtZQ==") /*"Name"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.String Name does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X05hbWU=") /*"get_Name"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Name() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Name() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Name() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X05hbWU=") /*"get_Name"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Name() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Name() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Name() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.String Name  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("U2l6ZQ==") /*"Size"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.Int32 Size does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1NpemU=") /*"get_Size"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Size() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Size() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Size() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1NpemU=") /*"get_Size"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Size() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Size() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Size() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.Int32 Size  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZXJz") /*"Lecturers"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.String[] Lecturers does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVycw==") /*"get_Lecturers"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Lecturers() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Lecturers() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String[]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Lecturers() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVycw==") /*"get_Lecturers"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Lecturers() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Lecturers() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String[]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.get_Lecturers() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String[]",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.SubjectItem.String[] Lecturers  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLk1vZGVscy5WYWxpZGF0aW9uUmVzdWx0") /*"Reservations.Models.ValidationResult"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult");
                    Assert.IsTrue(type.IsEnum, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult is not enum type");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult is not public class");
                    Assert.IsTrue(type.IsSealed, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult is not sealed type");
                    Assert.IsTrue(type.IsSerializable, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult is not serializable type");
                    Assert.IsTrue(type.IsValueType, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult is not value type");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("Q29tcGFyZVRv") /*"CompareTo"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.CompareTo(Object target) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.CompareTo(Object target) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.CompareTo(Object target) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.CompareTo(Object target) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.CompareTo(Object target) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("dGFyZ2V0") /*"target"*/  && x.ParameterType.FullName == "System.Object");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.CompareTo(Object target) parameter target does not exists or does not have type System.Object");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("R2V0VHlwZUNvZGU=") /*"GetTypeCode"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.GetTypeCode() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.GetTypeCode() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.GetTypeCode() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.TypeCode",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.GetTypeCode() return type has changed");
                            field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("dmFsdWVfXw==") /*"value__"*/ );
                            Assert.IsNotNull(field, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.Int32 value__ does not exists");
                            Assert.IsTrue(field.IsPublic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.Int32 value__ is not public");
                            fieldReturnType = field.FieldType;
                            Assert.AreEqual("System.Int32",fieldReturnType.FullName, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.Int32 value__  type has changed");
                            field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("RGVmYXVsdA==") /*"Default"*/ );
                            Assert.IsNotNull(field, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Default does not exists");
                            Assert.IsTrue(field.IsPublic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Default is not public");
                            Assert.IsTrue(field.IsStatic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Default is not static");
                            fieldReturnType = field.FieldType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",fieldReturnType.FullName, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Default  type has changed");
                            field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("TW9yZVRoYW5PbmVEYXk=") /*"MoreThanOneDay"*/ );
                            Assert.IsNotNull(field, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult MoreThanOneDay does not exists");
                            Assert.IsTrue(field.IsPublic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult MoreThanOneDay is not public");
                            Assert.IsTrue(field.IsStatic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult MoreThanOneDay is not static");
                            fieldReturnType = field.FieldType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",fieldReturnType.FullName, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult MoreThanOneDay  type has changed");
                            field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("VG9CZWZvcmVGcm9t") /*"ToBeforeFrom"*/ );
                            Assert.IsNotNull(field, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult ToBeforeFrom does not exists");
                            Assert.IsTrue(field.IsPublic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult ToBeforeFrom is not public");
                            Assert.IsTrue(field.IsStatic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult ToBeforeFrom is not static");
                            fieldReturnType = field.FieldType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",fieldReturnType.FullName, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult ToBeforeFrom  type has changed");
                            field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("T3V0c2lkZVdvcmtpbmdIb3Vycw==") /*"OutsideWorkingHours"*/ );
                            Assert.IsNotNull(field, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult OutsideWorkingHours does not exists");
                            Assert.IsTrue(field.IsPublic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult OutsideWorkingHours is not public");
                            Assert.IsTrue(field.IsStatic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult OutsideWorkingHours is not static");
                            fieldReturnType = field.FieldType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",fieldReturnType.FullName, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult OutsideWorkingHours  type has changed");
                            field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("VG9vTG9uZw==") /*"TooLong"*/ );
                            Assert.IsNotNull(field, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult TooLong does not exists");
                            Assert.IsTrue(field.IsPublic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult TooLong is not public");
                            Assert.IsTrue(field.IsStatic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult TooLong is not static");
                            fieldReturnType = field.FieldType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",fieldReturnType.FullName, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult TooLong  type has changed");
                            field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("Q29uZmxpY3Rpbmc=") /*"Conflicting"*/ );
                            Assert.IsNotNull(field, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Conflicting does not exists");
                            Assert.IsTrue(field.IsPublic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Conflicting is not public");
                            Assert.IsTrue(field.IsStatic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Conflicting is not static");
                            fieldReturnType = field.FieldType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",fieldReturnType.FullName, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Conflicting  type has changed");
                            field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZXJEb2VzTm90RXhpc3Q=") /*"LecturerDoesNotExist"*/ );
                            Assert.IsNotNull(field, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult LecturerDoesNotExist does not exists");
                            Assert.IsTrue(field.IsPublic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult LecturerDoesNotExist is not public");
                            Assert.IsTrue(field.IsStatic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult LecturerDoesNotExist is not static");
                            fieldReturnType = field.FieldType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",fieldReturnType.FullName, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult LecturerDoesNotExist  type has changed");
                            field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("SGFsbERvZXNOb3RFeGlzdA==") /*"HallDoesNotExist"*/ );
                            Assert.IsNotNull(field, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult HallDoesNotExist does not exists");
                            Assert.IsTrue(field.IsPublic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult HallDoesNotExist is not public");
                            Assert.IsTrue(field.IsStatic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult HallDoesNotExist is not static");
                            fieldReturnType = field.FieldType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",fieldReturnType.FullName, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult HallDoesNotExist  type has changed");
                            field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("T2s=") /*"Ok"*/ );
                            Assert.IsNotNull(field, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Ok does not exists");
                            Assert.IsTrue(field.IsPublic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Ok is not public");
                            Assert.IsTrue(field.IsStatic, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Ok is not static");
                            fieldReturnType = field.FieldType;
                            Assert.AreEqual("Reservations.Models.ValidationResult",fieldReturnType.FullName, "field: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Models.ValidationResult.ValidationResult Ok  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLkxlY3R1cmVIYWxs") /*"Reservations.Db.LectureHall"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TnVtYmVy") /*"Number"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.Int32 Number does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X051bWJlcg==") /*"get_Number"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Number() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Number() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Number() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X051bWJlcg==") /*"get_Number"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Number() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Number() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Number() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.Int32 Number  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q2FwYWNpdHk=") /*"Capacity"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.Int32 Capacity does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NhcGFjaXR5") /*"get_Capacity"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Capacity() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Capacity() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Capacity() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NhcGFjaXR5") /*"get_Capacity"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Capacity() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Capacity() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.get_Capacity() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.LectureHall.Int32 Capacity  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLkxlY3R1cmVy") /*"Reservations.Db.Lecturer"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("SWQ=") /*"Id"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.Int32 Id does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Id() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Id() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.Int32 Id  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VGl0bGU=") /*"Title"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.String Title does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1RpdGxl") /*"get_Title"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Title() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Title() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Title() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1RpdGxl") /*"get_Title"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Title() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Title() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Title() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.String Title  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TmFtZQ==") /*"Name"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.String Name does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X05hbWU=") /*"get_Name"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Name() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Name() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Name() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X05hbWU=") /*"get_Name"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Name() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Name() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Name() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.String Name  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("U3VybmFtZQ==") /*"Surname"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.String Surname does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1N1cm5hbWU=") /*"get_Surname"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Surname() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Surname() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Surname() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1N1cm5hbWU=") /*"get_Surname"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Surname() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Surname() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_Surname() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.String Surname  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q29uZHVjdGVkTGVjdHVyZQ==") /*"ConductedLecture"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.Subject ConductedLecture does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbmR1Y3RlZExlY3R1cmU=") /*"get_ConductedLecture"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_ConductedLecture() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_ConductedLecture() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_ConductedLecture() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("Reservations.Db.Subject",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_ConductedLecture() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbmR1Y3RlZExlY3R1cmU=") /*"get_ConductedLecture"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_ConductedLecture() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_ConductedLecture() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_ConductedLecture() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("Reservations.Db.Subject",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.get_ConductedLecture() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("Reservations.Db.Subject",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Lecturer.Subject ConductedLecture  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLlJlc2VydmF0aW9u") /*"Reservations.Db.Reservation"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("SWQ=") /*"Id"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.Int32 Id does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Id() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Id() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.Int32 Id  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("RnJvbQ==") /*"From"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.DateTime From does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0Zyb20=") /*"get_From"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_From() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_From() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_From() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0Zyb20=") /*"get_From"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_From() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_From() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_From() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.DateTime From  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VG8=") /*"To"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.DateTime To does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Rv") /*"get_To"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_To() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_To() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_To() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Rv") /*"get_To"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_To() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_To() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_To() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.DateTime To  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("SGFsbA==") /*"Hall"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.LectureHall Hall does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0hhbGw=") /*"get_Hall"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Hall() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Hall() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Hall() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("Reservations.Db.LectureHall",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Hall() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0hhbGw=") /*"get_Hall"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Hall() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Hall() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Hall() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("Reservations.Db.LectureHall",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Hall() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("Reservations.Db.LectureHall",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.LectureHall Hall  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZXI=") /*"Lecturer"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.Lecturer Lecturer does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVy") /*"get_Lecturer"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Lecturer() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Lecturer() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Lecturer() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("Reservations.Db.Lecturer",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Lecturer() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVy") /*"get_Lecturer"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Lecturer() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Lecturer() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Lecturer() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("Reservations.Db.Lecturer",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.get_Lecturer() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("Reservations.Db.Lecturer",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Reservation.Lecturer Lecturer  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLlN1YmplY3Q=") /*"Reservations.Db.Subject"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("SWQ=") /*"Id"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.Int32 Id does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Id() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Id() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Id() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Id() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.Int32 Id  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TmFtZQ==") /*"Name"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.String Name does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X05hbWU=") /*"get_Name"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Name() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Name() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Name() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X05hbWU=") /*"get_Name"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Name() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Name() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Name() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.String Name  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("U2l6ZQ==") /*"Size"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.Int32 Size does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1NpemU=") /*"get_Size"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Size() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Size() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Size() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1NpemU=") /*"get_Size"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Size() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Size() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Size() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.Int32 Size  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZXJz") /*"Lecturers"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.ICollection`1 Lecturers does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVycw==") /*"get_Lecturers"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Lecturers() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Lecturers() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Lecturers() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.ICollection`1[[Reservations.Db.Lecturer, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Lecturers() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVycw==") /*"get_Lecturers"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Lecturers() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Lecturers() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Lecturers() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.ICollection`1[[Reservations.Db.Lecturer, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.get_Lecturers() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Collections.Generic.ICollection`1[[Reservations.Db.Lecturer, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.Subject.ICollection`1 Lecturers  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLklEYXRhYmFzZQ==") /*"Reservations.Db.IDatabase"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase");
                    Assert.IsTrue(type.IsAbstract, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase is not abstract class");
                    Assert.IsTrue(type.IsInterface, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase is not interface");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase is not public class");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("UmVzZXJ2YXRpb25z") /*"Reservations"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.IDictionary`2 Reservations does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Jlc2VydmF0aW9ucw==") /*"get_Reservations"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Reservations() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Reservations() is not public");
                                Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Reservations() is not abstract");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Reservations() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Reservation, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Reservations() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Reservation, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.IDictionary`2 Reservations  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZXJz") /*"Lecturers"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.IDictionary`2 Lecturers does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVycw==") /*"get_Lecturers"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Lecturers() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Lecturers() is not public");
                                Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Lecturers() is not abstract");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Lecturers() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Lecturer, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Lecturers() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Lecturer, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.IDictionary`2 Lecturers  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZUhhbGxz") /*"LectureHalls"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.IDictionary`2 LectureHalls does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVIYWxscw==") /*"get_LectureHalls"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_LectureHalls() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_LectureHalls() is not public");
                                Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_LectureHalls() is not abstract");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_LectureHalls() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.LectureHall, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_LectureHalls() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.LectureHall, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.IDictionary`2 LectureHalls  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("U3ViamVjdHM=") /*"Subjects"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.IDictionary`2 Subjects does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1N1YmplY3Rz") /*"get_Subjects"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Subjects() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Subjects() is not public");
                                Assert.IsTrue(method.IsAbstract, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Subjects() is not abstract");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Subjects() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Subject, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.get_Subjects() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Subject, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.IDatabase.IDictionary`2 Subjects  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLkluTWVtb3J5RGF0YWJhc2U=") /*"Reservations.Db.InMemoryDatabase"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase() does not exists");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Reservation, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]");
                            constructorParameterNameTypeDictionary.Add("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Lecturer, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]");
                            constructorParameterNameTypeDictionary.Add("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.LectureHall, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]");
                            constructorParameterNameTypeDictionary.Add("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Subject, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase(IDictionary`2 reservationsIDictionary`2 lecturersIDictionary`2 lectureHallsIDictionary`2 subjects) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(4,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase(IDictionary`2 reservationsIDictionary`2 lecturersIDictionary`2 lectureHallsIDictionary`2 subjects)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("cmVzZXJ2YXRpb25z") /*"reservations"*/  && x.ParameterType.IsGenericType && x.ParameterType.FullName.StartsWith("System.Collections.Generic.IDictionary`2[[System.Int32"));
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase(IDictionary`2 reservationsIDictionary`2 lecturersIDictionary`2 lectureHallsIDictionary`2 subjects) parameter reservations does not exists or does not have type System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Reservation, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(4,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase(IDictionary`2 reservationsIDictionary`2 lecturersIDictionary`2 lectureHallsIDictionary`2 subjects)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("bGVjdHVyZXJz") /*"lecturers"*/  && x.ParameterType.IsGenericType && x.ParameterType.FullName.StartsWith("System.Collections.Generic.IDictionary`2[[System.Int32"));
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase(IDictionary`2 reservationsIDictionary`2 lecturersIDictionary`2 lectureHallsIDictionary`2 subjects) parameter lecturers does not exists or does not have type System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Lecturer, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(4,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase(IDictionary`2 reservationsIDictionary`2 lecturersIDictionary`2 lectureHallsIDictionary`2 subjects)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("bGVjdHVyZUhhbGxz") /*"lectureHalls"*/  && x.ParameterType.IsGenericType && x.ParameterType.FullName.StartsWith("System.Collections.Generic.IDictionary`2[[System.Int32"));
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase(IDictionary`2 reservationsIDictionary`2 lecturersIDictionary`2 lectureHallsIDictionary`2 subjects) parameter lectureHalls does not exists or does not have type System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.LectureHall, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(4,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase(IDictionary`2 reservationsIDictionary`2 lecturersIDictionary`2 lectureHallsIDictionary`2 subjects)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("c3ViamVjdHM=") /*"subjects"*/  && x.ParameterType.IsGenericType && x.ParameterType.FullName.StartsWith("System.Collections.Generic.IDictionary`2[[System.Int32"));
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase(IDictionary`2 reservationsIDictionary`2 lecturersIDictionary`2 lectureHallsIDictionary`2 subjects) parameter subjects does not exists or does not have type System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Subject, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("UmVzZXJ2YXRpb25z") /*"Reservations"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.IDictionary`2 Reservations does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Jlc2VydmF0aW9ucw==") /*"get_Reservations"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Reservations() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Reservations() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Reservations() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Reservation, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Reservations() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Jlc2VydmF0aW9ucw==") /*"get_Reservations"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Reservations() does not exists");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Reservation, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Reservations() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Reservation, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.IDictionary`2 Reservations  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZXJz") /*"Lecturers"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.IDictionary`2 Lecturers does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVycw==") /*"get_Lecturers"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Lecturers() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Lecturers() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Lecturers() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Lecturer, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Lecturers() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVycw==") /*"get_Lecturers"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Lecturers() does not exists");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Lecturer, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Lecturers() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Lecturer, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.IDictionary`2 Lecturers  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGVjdHVyZUhhbGxz") /*"LectureHalls"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.IDictionary`2 LectureHalls does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVIYWxscw==") /*"get_LectureHalls"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_LectureHalls() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_LectureHalls() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_LectureHalls() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.LectureHall, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_LectureHalls() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xlY3R1cmVIYWxscw==") /*"get_LectureHalls"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_LectureHalls() does not exists");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.LectureHall, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_LectureHalls() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.LectureHall, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.IDictionary`2 LectureHalls  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("U3ViamVjdHM=") /*"Subjects"*/ );
                            Assert.IsNotNull(property, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.IDictionary`2 Subjects does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1N1YmplY3Rz") /*"get_Subjects"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Subjects() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Subjects() is not public");
                                Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Subjects() is not virtual");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Subject, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Subjects() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1N1YmplY3Rz") /*"get_Subjects"*/ );                                Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Subjects() does not exists");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Subject, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.get_Subjects() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Collections.Generic.IDictionary`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Reservations.Db.Subject, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",propertyReturnType.FullName, "property: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.InMemoryDatabase.IDictionary`2 Subjects  type has changed");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLkFkZFJlc2VydmF0aW9uUXVlcnk=") /*"Reservations.Db.AddReservationQuery"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.AddReservationQuery");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.AddReservationQuery is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.AddReservationQuery is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RXhlY3V0ZQ==") /*"Execute"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.AddReservationQuery.Execute(Reservation newReservation) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.AddReservationQuery.Execute(Reservation newReservation) is not public");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.AddReservationQuery.Execute(Reservation newReservation) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.AddReservationQuery.Execute(Reservation newReservation) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("bmV3UmVzZXJ2YXRpb24=") /*"newReservation"*/  && x.ParameterType.FullName == "Reservations.Db.Reservation");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.AddReservationQuery.Execute(Reservation newReservation) parameter newReservation does not exists or does not have type Reservations.Db.Reservation");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.IDatabase");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.AddReservationQuery(IDatabase db) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.AddReservationQuery(IDatabase db)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("ZGI=") /*"db"*/  && x.ParameterType.FullName == "Reservations.Db.IDatabase");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.AddReservationQuery(IDatabase db) parameter db does not exists or does not have type Reservations.Db.IDatabase");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLkRlbGV0ZVJlc2VydmF0aW9uUXVlcnk=") /*"Reservations.Db.DeleteReservationQuery"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.DeleteReservationQuery");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.DeleteReservationQuery is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.DeleteReservationQuery is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RXhlY3V0ZQ==") /*"Execute"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.DeleteReservationQuery.Execute(Int32 id) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.DeleteReservationQuery.Execute(Int32 id) is not public");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.DeleteReservationQuery.Execute(Int32 id) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.DeleteReservationQuery.Execute(Int32 id) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("aWQ=") /*"id"*/  && x.ParameterType.FullName == "System.Int32");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.DeleteReservationQuery.Execute(Int32 id) parameter id does not exists or does not have type System.Int32");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.IDatabase");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.DeleteReservationQuery(IDatabase db) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.DeleteReservationQuery(IDatabase db)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("ZGI=") /*"db"*/  && x.ParameterType.FullName == "Reservations.Db.IDatabase");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.DeleteReservationQuery(IDatabase db) parameter db does not exists or does not have type Reservations.Db.IDatabase");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLkdldEFsbExlY3R1cmVIYWxsc1F1ZXJ5") /*"Reservations.Db.GetAllLectureHallsQuery"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLectureHallsQuery");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLectureHallsQuery is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLectureHallsQuery is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RXhlY3V0ZQ==") /*"Execute"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLectureHallsQuery.Execute() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLectureHallsQuery.Execute() is not public");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Linq.IQueryable`1[[Reservations.Db.LectureHall, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLectureHallsQuery.Execute() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.IDatabase");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLectureHallsQuery(IDatabase db) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLectureHallsQuery(IDatabase db)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("ZGI=") /*"db"*/  && x.ParameterType.FullName == "Reservations.Db.IDatabase");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLectureHallsQuery(IDatabase db) parameter db does not exists or does not have type Reservations.Db.IDatabase");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLkdldEFsbExlY3R1cmVyc1F1ZXJ5") /*"Reservations.Db.GetAllLecturersQuery"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLecturersQuery");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLecturersQuery is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLecturersQuery is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RXhlY3V0ZQ==") /*"Execute"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLecturersQuery.Execute() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLecturersQuery.Execute() is not public");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Linq.IQueryable`1[[Reservations.Db.Lecturer, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLecturersQuery.Execute() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.IDatabase");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLecturersQuery(IDatabase db) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLecturersQuery(IDatabase db)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("ZGI=") /*"db"*/  && x.ParameterType.FullName == "Reservations.Db.IDatabase");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllLecturersQuery(IDatabase db) parameter db does not exists or does not have type Reservations.Db.IDatabase");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLkdldEFsbFJlc2VydmF0aW9uc1F1ZXJ5") /*"Reservations.Db.GetAllReservationsQuery"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllReservationsQuery");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllReservationsQuery is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllReservationsQuery is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RXhlY3V0ZQ==") /*"Execute"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllReservationsQuery.Execute() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllReservationsQuery.Execute() is not public");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Linq.IQueryable`1[[Reservations.Db.Reservation, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllReservationsQuery.Execute() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.IDatabase");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllReservationsQuery(IDatabase db) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllReservationsQuery(IDatabase db)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("ZGI=") /*"db"*/  && x.ParameterType.FullName == "Reservations.Db.IDatabase");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllReservationsQuery(IDatabase db) parameter db does not exists or does not have type Reservations.Db.IDatabase");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLkdldEFsbFN1YmplY3RzUXVlcnk=") /*"Reservations.Db.GetAllSubjectsQuery"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllSubjectsQuery");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllSubjectsQuery is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllSubjectsQuery is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RXhlY3V0ZQ==") /*"Execute"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllSubjectsQuery.Execute() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllSubjectsQuery.Execute() is not public");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Linq.IQueryable`1[[Reservations.Db.Subject, Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllSubjectsQuery.Execute() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.IDatabase");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllSubjectsQuery(IDatabase db) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllSubjectsQuery(IDatabase db)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("ZGI=") /*"db"*/  && x.ParameterType.FullName == "Reservations.Db.IDatabase");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetAllSubjectsQuery(IDatabase db) parameter db does not exists or does not have type Reservations.Db.IDatabase");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkRiLkdldFJlc2VydmF0aW9uQnlJZFF1ZXJ5") /*"Reservations.Db.GetReservationByIdQuery"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetReservationByIdQuery");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetReservationByIdQuery is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetReservationByIdQuery is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RXhlY3V0ZQ==") /*"Execute"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetReservationByIdQuery.Execute(Int32 id) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetReservationByIdQuery.Execute(Int32 id) is not public");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("Reservations.Db.Reservation",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetReservationByIdQuery.Execute(Int32 id) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetReservationByIdQuery.Execute(Int32 id) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("aWQ=") /*"id"*/  && x.ParameterType.FullName == "System.Int32");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetReservationByIdQuery.Execute(Int32 id) parameter id does not exists or does not have type System.Int32");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Db.IDatabase");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetReservationByIdQuery(IDatabase db) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetReservationByIdQuery(IDatabase db)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("ZGI=") /*"db"*/  && x.ParameterType.FullName == "Reservations.Db.IDatabase");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Db.GetReservationByIdQuery(IDatabase db) parameter db does not exists or does not have type Reservations.Db.IDatabase");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkNvbnRyb2xsZXJzLkxlY3R1cmVIYWxsc0NvbnRyb2xsZXI=") /*"Reservations.Controllers.LectureHallsController"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RXhlY3V0ZUFzeW5j") /*"ExecuteAsync"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Threading.Tasks.Task`1[[System.Net.Http.HttpResponseMessage, System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("Y29udHJvbGxlckNvbnRleHQ=") /*"controllerContext"*/  && x.ParameterType.FullName == "System.Web.Http.Controllers.HttpControllerContext");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameter controllerContext does not exists or does not have type System.Web.Http.Controllers.HttpControllerContext");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("Y2FuY2VsbGF0aW9uVG9rZW4=") /*"cancellationToken"*/  && x.ParameterType.FullName == "System.Threading.CancellationToken");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameter cancellationToken does not exists or does not have type System.Threading.CancellationToken");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RGlzcG9zZQ==") /*"Dispose"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.Dispose() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.Dispose() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.Dispose() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController.Dispose() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Services.ILectureHallsService");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController(ILectureHallsService service) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController(ILectureHallsService service)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("c2VydmljZQ==") /*"service"*/  && x.ParameterType.FullName == "Reservations.Services.ILectureHallsService");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LectureHallsController(ILectureHallsService service) parameter service does not exists or does not have type Reservations.Services.ILectureHallsService");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkNvbnRyb2xsZXJzLkxlY3R1cmVyc0NvbnRyb2xsZXI=") /*"Reservations.Controllers.LecturersController"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RXhlY3V0ZUFzeW5j") /*"ExecuteAsync"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Threading.Tasks.Task`1[[System.Net.Http.HttpResponseMessage, System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("Y29udHJvbGxlckNvbnRleHQ=") /*"controllerContext"*/  && x.ParameterType.FullName == "System.Web.Http.Controllers.HttpControllerContext");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameter controllerContext does not exists or does not have type System.Web.Http.Controllers.HttpControllerContext");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("Y2FuY2VsbGF0aW9uVG9rZW4=") /*"cancellationToken"*/  && x.ParameterType.FullName == "System.Threading.CancellationToken");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameter cancellationToken does not exists or does not have type System.Threading.CancellationToken");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RGlzcG9zZQ==") /*"Dispose"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.Dispose() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.Dispose() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.Dispose() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController.Dispose() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Services.ILecturersService");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController(ILecturersService service) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController(ILecturersService service)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("c2VydmljZQ==") /*"service"*/  && x.ParameterType.FullName == "Reservations.Services.ILecturersService");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.LecturersController(ILecturersService service) parameter service does not exists or does not have type Reservations.Services.ILecturersService");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkNvbnRyb2xsZXJzLlJlc2VydmF0aW9uc0NvbnRyb2xsZXI=") /*"Reservations.Controllers.ReservationsController"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RXhlY3V0ZUFzeW5j") /*"ExecuteAsync"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Threading.Tasks.Task`1[[System.Net.Http.HttpResponseMessage, System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("Y29udHJvbGxlckNvbnRleHQ=") /*"controllerContext"*/  && x.ParameterType.FullName == "System.Web.Http.Controllers.HttpControllerContext");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameter controllerContext does not exists or does not have type System.Web.Http.Controllers.HttpControllerContext");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("Y2FuY2VsbGF0aW9uVG9rZW4=") /*"cancellationToken"*/  && x.ParameterType.FullName == "System.Threading.CancellationToken");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameter cancellationToken does not exists or does not have type System.Threading.CancellationToken");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RGlzcG9zZQ==") /*"Dispose"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.Dispose() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.Dispose() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.Dispose() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController.Dispose() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Services.IReservationsService");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController(IReservationsService service) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController(IReservationsService service)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("c2VydmljZQ==") /*"service"*/  && x.ParameterType.FullName == "Reservations.Services.IReservationsService");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.ReservationsController(IReservationsService service) parameter service does not exists or does not have type Reservations.Services.IReservationsService");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("UmVzZXJ2YXRpb25zLkNvbnRyb2xsZXJzLlN1YmplY3RzQ29udHJvbGxlcg==") /*"Reservations.Controllers.SubjectsController"*/ );
                Assert.IsNotNull(type, "Missing assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController");
                    Assert.IsTrue(type.IsClass, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController is not public class");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RXhlY3V0ZUFzeW5j") /*"ExecuteAsync"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Threading.Tasks.Task`1[[System.Net.Http.HttpResponseMessage, System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) return type has changed");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("Y29udHJvbGxlckNvbnRleHQ=") /*"controllerContext"*/  && x.ParameterType.FullName == "System.Web.Http.Controllers.HttpControllerContext");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameter controllerContext does not exists or does not have type System.Web.Http.Controllers.HttpControllerContext");
                                parametersCount = method.GetParameters().Length;
                                Assert.AreEqual(2,parametersCount, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameters count has changed");
                                parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("Y2FuY2VsbGF0aW9uVG9rZW4=") /*"cancellationToken"*/  && x.ParameterType.FullName == "System.Threading.CancellationToken");
                                Assert.IsNotNull(parameter, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.ExecuteAsync(HttpControllerContext controllerContextCancellationToken cancellationToken) parameter cancellationToken does not exists or does not have type System.Threading.CancellationToken");
                            method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RGlzcG9zZQ==") /*"Dispose"*/ );                            Assert.IsNotNull(method, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.Dispose() does not exists");
                            Assert.IsTrue(method.IsPublic, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.Dispose() is not public");
                            Assert.IsTrue(method.IsVirtual, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.Dispose() is not virtual");
                            methodReturnType = method.ReturnType;
                            Assert.AreEqual("System.Void",methodReturnType.FullName, "method: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController.Dispose() return type has changed");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructorParameterNameTypeDictionary.Add("Reservations.Services.ISubjectsService");
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController(ISubjectsService service) does not exists");
                                parametersCount = constructor.GetParameters().Length;
                                Assert.AreEqual(1,parametersCount, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController(ISubjectsService service)  parameters count has changed");
                                parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("c2VydmljZQ==") /*"service"*/  && x.ParameterType.FullName == "Reservations.Services.ISubjectsService");
                                Assert.IsNotNull(parameter, "constructor: Reservations, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:Reservations.Controllers.SubjectsController(ISubjectsService service) parameter service does not exists or does not have type Reservations.Services.ISubjectsService");


        }

        /// <summary>
        /// !!! WARNING 
        /// !!! Project structure test.
        /// !!! DON'T CHANGE IT! 
        /// !!! Changes may cause the solution to be rejected.
        /// </summary>
        private string Decode(string text)
        {
            return System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(text));
        }
    }
}
